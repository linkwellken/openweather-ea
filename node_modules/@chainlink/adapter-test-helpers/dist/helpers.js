"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serverErrors = exports.validationErrors = exports.successes = exports.assertSuccess = exports.assertError = void 0;
const chai_1 = require("chai");
const external_adapter_1 = require("@chainlink/external-adapter");
function assertError(statusCode, data, expectedJobId) {
    chai_1.assert.equal(statusCode.actual, statusCode.expected);
    chai_1.assert.equal(data.jobRunID, expectedJobId);
    chai_1.assert.equal(data.status, 'errored');
    chai_1.assert.exists(data.error);
    chai_1.assert.exists(data.error.name);
    chai_1.assert.exists(data.error.message);
}
exports.assertError = assertError;
function assertSuccess(statusCode, data, expectedJobId) {
    chai_1.assert.equal(statusCode.actual, statusCode.expected);
    chai_1.assert.equal(data.jobRunID, expectedJobId);
    chai_1.assert.notExists(data.error);
    chai_1.assert.isNotEmpty(data.data);
    chai_1.assert.equal(data.result, data.data.result);
}
exports.assertSuccess = assertSuccess;
function buildErrors(label, code, requests, execute) {
    context(label, () => {
        requests.forEach((req) => {
            it(`${req.name}`, async () => {
                try {
                    await execute(req.testData);
                }
                catch (error) {
                    const id = req.testData.id;
                    const errorResp = external_adapter_1.Requester.errored(id, error);
                    assertError({ expected: code, actual: errorResp.statusCode }, errorResp, id);
                }
            });
        });
    });
}
function successes(requests, execute, assertions) {
    context('successful calls @integration', () => {
        requests.forEach((req) => {
            it(`${req.name}`, async () => {
                const id = req.testData.id || '1';
                const data = await execute(req.testData);
                assertSuccess({ expected: 200, actual: data.statusCode }, data, id);
                if (assertions)
                    assertions(req, data);
            });
        });
    });
}
exports.successes = successes;
function validationErrors(requests, execute) {
    buildErrors('validation error', 400, requests, execute);
}
exports.validationErrors = validationErrors;
function serverErrors(requests, execute) {
    buildErrors('error calls @integration', 500, requests, execute);
}
exports.serverErrors = serverErrors;
//# sourceMappingURL=helpers.js.map